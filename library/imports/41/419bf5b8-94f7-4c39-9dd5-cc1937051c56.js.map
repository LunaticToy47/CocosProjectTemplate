{"version":3,"sources":["..\\..\\..\\..\\..\\assets\\Script\\basic/assets\\Script\\basic\\BaseFunction.ts"],"names":[],"mappings":";;;;;AACA,6BAAkD;AAElD,gBAA0B,OAA2B,EAAE,IAAc;IACjE,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAA;AAC1C,CAAC;AAFD,wBAEC;AAED,yBACI,IAAa,EACb,SAAiB,EACjB,cAA2C,EAC3C,OAAU;IAEV,IAAI,QAAQ,GAAG,IAAI,sBAAe,CAAC,OAAO,CAAC,CAAC;IAC5C,IAAI,OAAO,GAAG,UAAC,CAAuB;QAClC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;IACrC,CAAC,CAAA;IACD,IAAI,CAAC,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC5B,OAAO,QAAQ,CAAC;AACpB,CAAC;AAZD,0CAYC;AAED,2BACI,IAAa,EACb,SAAiB,EACjB,cAA4C;IAE5C,OAAO,IAAI,iBAAU,CAAI,UAAA,UAAU;QAC/B,IAAI,OAAO,GAAG,UAAC,CAAuB;YAClC,IAAI,cAAc,IAAI,SAAS,EAAE;gBAC7B,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACzB;iBAAM;gBACH,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;aACtC;QACL,CAAC,CAAA;QACD,IAAI,CAAC,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAC5B,UAAU,CAAC,GAAG,CAAC,cAAM,OAAA,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,EAA5B,CAA4B,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;AACP,CAAC;AAhBD,8CAgBC","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\Script\\basic","sourcesContent":["import { Fn } from \"./Types\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\"\r\n\r\nexport function modify<T>(subject: BehaviorSubject<T>, func: Fn<T, T>) {\r\n    subject.next(func(subject.getValue()))\r\n}\r\n\r\nexport function eventToBehavior<T>(\r\n    node: cc.Node, \r\n    eventType: string, \r\n    resultSelector: Fn<cc.Event.EventCustom, T>,\r\n    initial: T\r\n): BehaviorSubject<T> {\r\n    let behavior = new BehaviorSubject(initial);\r\n    let handler = (e: cc.Event.EventCustom) => {\r\n        behavior.next(resultSelector(e));\r\n    }\r\n    node.on(eventType, handler);\r\n    return behavior;\r\n}\r\n\r\nexport function eventToObservable<T>(\r\n    node: cc.Node, \r\n    eventType: string, \r\n    resultSelector?: Fn<cc.Event.EventCustom, T>,\r\n): Observable<T> {\r\n    return new Observable<T>(subscriber => {\r\n        let handler = (e: cc.Event.EventCustom) => {\r\n            if (resultSelector == undefined) {\r\n                subscriber.next(null);\r\n            } else {\r\n                subscriber.next(resultSelector(e));\r\n            }\r\n        }\r\n        node.on(eventType, handler);\r\n        subscriber.add(() => node.off(eventType, handler));\r\n    });\r\n}\r\n\r\n"]}