{"version":3,"sources":["BaseComponent.ts"],"names":[],"mappings":";;;;;AAGA,yCAAwC;AACxC,yCAAwC;AAGlC,IAAA,kBAAmC,EAAlC,oBAAO,EAAE,sBAAQ,CAAiB;AAGzC;IAAyE,iCAAY;IAArF;;IAwCA,CAAC;IApCG,8BAAM,GAAN,UAAO,KAAa,IAAG,CAAC;IAExB,4BAAI,GAAJ,UAAM,MAAc,IAAG,CAAC;IAExB,6BAAK,GAAL,UAAS,SAAuB;QAC5B,OAAO,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC;IAED,6BAAK,GAAL;QACI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAClB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC3C;IACL,CAAC;IAED,kCAAU,GAAV,UAAW,IAAa,EAAE,MAAc;QAAxC,iBAEC;QADG,IAAI,CAAC,EAAE,CAAC,qBAAS,EAAE,cAAM,OAAA,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAjB,CAAiB,CAAC,CAAC;IAChD,CAAC;IAED;;OAEG;IACH,4BAAI,GAAJ,UAAM,MAAc;QAChB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACf,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACrB;aAAM;YACH,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAC7B;IACL,CAAC;IAED;;;OAGG;IACH,gCAAQ,GAAR,UAAS,MAAoB;QACzB,qBAAS,CAAC,WAAW,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IACnD,CAAC;IAvCQ,aAAa;QADzB,OAAO;OACK,aAAa,CAwCzB;IAAD,oBAAC;CAxCD,AAwCC,CAxCwE,EAAE,CAAC,SAAS,GAwCpF;AAxCY,sCAAa","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\Script\\basic","sourcesContent":["import { Component } from \"./Component\";\r\nimport { Fn, Type } from \"./Types\";\r\nimport { Subject } from \"rxjs\";\r\nimport { TOUCH_END } from \"./Constants\";\r\nimport { GlobalEnv } from \"./GlobalEnv\";\r\nimport { GlobalAction } from \"../core/GlobalAction\";\r\n\r\nconst {ccclass, property} = cc._decorator\r\n\r\n@ccclass\r\nexport class BaseComponent<State, Action extends Type<any, any>> extends cc.Component implements Component<State, Action> {\r\n    state: State;\r\n    actions: Subject<Action>;\r\n\r\n    render(count: number) {}\r\n\r\n    eval (action: Action) {}\r\n\r\n    query<T>(extractor: Fn<State, T>) {\r\n        return extractor(this.state);\r\n    }\r\n\r\n    close () {\r\n        if (this.node.parent) {\r\n            this.node.parent.removeChild(this.node);\r\n        }\r\n    }\r\n\r\n    onTouchEnd(node: cc.Node, action: Action) {\r\n        node.on(TOUCH_END, () => this.fork(action));\r\n    }\r\n\r\n    /**\r\n     * 将一个action 作为下一个要处理的Action\r\n     */\r\n    fork (action: Action) {\r\n        if (!this.actions) {\r\n            this.eval(action);\r\n        } else {\r\n            this.actions.next(action);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 向全局发射事件，关心此事件的地方\r\n     * 可以filter指定事件名字，然后监听\r\n     */\r\n    dispatch(action: GlobalAction) {\r\n        GlobalEnv.getInstance().dispatchAction(action);\r\n    }\r\n}"]}