{"version":3,"sources":["Types.ts"],"names":[],"mappings":";;;;;AAEa,QAAA,IAAI,GAAG,aAAa,CAAA;AAQjC,gBAA6B,QAAW,EAAE,KAAwB;IAC9D,OAAO,EAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAC,CAAC;AAC9C,CAAC;AAFD,wBAEC;AAED,oBAA8B,QAAW;IACrC,OAAO,EAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,YAAI,EAAC,CAAC;AAC7C,CAAC;AAFD,gCAEC","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\Script\\basic","sourcesContent":["// () in Haskell, Unit in Purescript\r\nexport type Unit = \"Symbol_Unit\"\r\nexport const unit = \"Symbol_Unit\"\r\n\r\n// 类型构建器\r\nexport type Type<T, U> = {typeName: T, value: U};\r\nexport type TypeUnit<T> = Type<T, Unit>\r\n\r\n\r\n\r\nexport function Action<T, U>(typeName: T, value?: Exclude<U, Unit>): Type<T, Exclude<U, Unit>> {\r\n    return {typeName: typeName, value: value};\r\n}\r\n\r\nexport function ActionUnit<T>(typeName: T): Type<T, Unit> {\r\n    return {typeName: typeName, value: unit};\r\n}\r\n\r\n\r\n// 函数类型\r\nexport type Fn<F1, F2> =  (_: F1) => F2\r\nexport type Fn2<F1, F2, F3> =  (_1: F1, _2: F2) => F3\r\nexport type Fn3<F1, F2, F3, F4> =  (_1: F1, _2: F2, _3: F3) => F4\r\nexport type Fn4<F1, F2, F3, F4, F5> =  (_1: F1, _2: F2, _3: F3, _4: F4) => F5\r\nexport type Fn5<F1, F2, F3, F4, F5, F6> =  (_1: F1, _2: F2, _3: F3, _4: F4, _5: F5) => F6\r\n\r\n"]}